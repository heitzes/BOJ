from itertools import combinations
from bisect import bisect_left, bisect_right
    
def solution(info, query):
    answer = []
    mask = {'java': '1', 'cpp': '2', 'python': '3', 'backend': '4', 'frontend': '5',
           'junior': '6', 'senior': '7', 'chicken': '8', 'pizza': '9', '-': ''}    
    info = sorted(info, key = lambda x: int(x.split()[-1]))
    l, p, y, s = ['', '1', '2', '3'], ['', '4', '5'], ['', '6', '7'], ['', '8', '9']
    idict = dict()
    
    qset = set()
    for q in query:
        a, b, c, d = q.split(' and ')
        d, e = d.split()  
        qset.add(int(e))
    qlist = sorted(qset)
    
    for a in range(4):
        for b in range(3):
            for c in range(3):
                for d in range(3):
                    idict[''.join([l[a], p[b], y[c], s[d]])] = []
    

    for i in info:
        a, b, c, d, e = i.split()
        tp = ''.join(mask[j] for j in [a, b, c, d])
        tps = []
        for k in range(5):
            tps += [''.join(t) for t in combinations(tp, k)]
        for tp in tps:
            idict[tp].append(int(e))

    for q in query:
        a, b, c, d = q.split(' and ')
        d, e = d.split()
        tp = ''.join(mask[j] for j in [a, b, c, d])
        cnt = 0
        left = bisect_left(idict[tp], int(e))
        if left == len(idict[tp]):
            answer.append(0)
        else:
            answer.append(len(idict[tp])-left)

    return answer