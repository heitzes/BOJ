from collections import deque
def bfs(n, point, to, link):
    visited = link[point][to]
    dq = deque(link[point][to])
    while dq:
        node = dq.popleft()
        for ch in link[node][to]:
            if ch not in visited:
                visited.append(ch)
                dq.append(ch)
    return visited
    
    
def solution(n, results):
    answer = 0
    maps = [[[], []] for _ in range(n+1)]
    for r in results:
        a, b = r
        maps[a][1].append(b)
        maps[b][0].append(a)
    for i in range(1, n+1):
        vs1 = bfs(n, i, 0, maps)
        vs2 = bfs(n, i, 1, maps)
        if len(vs1) + len(vs2) == n - 1:
            answer += 1
    return answer